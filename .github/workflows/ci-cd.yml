name: CI_CD Pipeline

on:
  push:
    branches:
      - ci_cd

env:  # variables globales (comme dans GitLab)
  DOCKER_IMAGE: registry.gitlab.com/moustaphafekotan/api-restful-laravel-bibliotheque
  COMPOSER_CACHE_DIR: .composer-cache
  COMPOSER_HOME: .composer

jobs:
  # =======================
  # Build
  # =======================
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitLab registry
        run:  echo "${{ secrets.CI_REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.CI_REGISTRY_USER }}" --password-stdin registry.gitlab.com

      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE }}:latest .

  # =======================
  # Tests (Laravel)
  # =======================
  tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DB_HOST: mysql
          DB_CONNECTION: mysql
          DB_PORT: 3306
          DB_DATABASE: $MYSQL_DATABASE
          DB_USERNAME: $MYSQL_USER
          DB_PASSWORD: $MYSQL_PASSWORD

        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Install dependencies
        run: composer install --optimize-autoloader --no-interaction --no-progress

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run Feature tests
        run: php artisan test --testsuite=Feature

  # =======================
  # Quality (PHPStan)
  # =======================
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Install dependencies
        run: composer install --optimize-autoloader --no-interaction --no-progress

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse app database routes --memory-limit=1G
        continue-on-error: true

  # =======================
  # Package
  # =======================
  package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.GITLAB_TOKEN }}" | docker login -u gitlab-ci-token --password-stdin ${{ env.DOCKER_IMAGE }}

      - name: Build & push Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest
          docker push ${{ env.DOCKER_IMAGE }}:latest

  # =======================
  # Deploy (Render)
  # =======================
  deploy:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Trigger Render deploy
        run: |
          curl -X POST "https://api.render.com/deploy/${{ secrets.RENDER_SERVICE_ID }}?key=${{ secrets.RENDER_API_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": true}'

  # =======================
  # Post-Deploy Tests
  # =======================
  acceptance_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run acceptance test
        run: |
          sudo apt-get update && sudo apt-get install -y curl grep
          echo "Acceptance vérifier que la page d'accueil contient un mot-clé attendu..."
          curl -fsS "${{ secrets.RENDER_SERVICE_URL }}" | grep -i "laravel"
        continue-on-error: true

  smoke_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run smoke tests
        run: |
          echo "Smoke vérification des endpoints critiques (HTTP 200)..."
          curl -f "${{ secrets.RENDER_SERVICE_URL }}/api/register"
          curl -f "${{ secrets.RENDER_SERVICE_URL }}/api/login" || true
        continue-on-error: true

  performance_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: Run k6 load test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: loadtest.js
        env:
          TARGET_URL: ${{ secrets.RENDER_SERVICE_URL }}
    continue-on-error: true

  security_tests:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          severity: HIGH,CRITICAL
    continue-on-error: true

  iac_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - name: IaC scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
    continue-on-error: true